version: '3.7'

networks:
  ${SC_NETWORK_NAME}:
    name: ${SC_NETWORK_NAME}

services:

  cli:
    hostname: cli.${SC_NETWORK_DOMAIN}
    image: hyperledger/fabric-tools:${SC_VERSION_FABRIC}
    labels:
      service: hyperledger-fabric
    tty: true
    stdin_open: true
    environment:
      - GOPATH=/opt/gopath
      - FABRIC_LOGGING_SPEC=${SC_FABRIC_LOGLEVEL}
      - FABRIC_CFG_PATH=/etc/hyperledger/peercfg

      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${SC_NETWORK_NAME}
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ID=cli
      - CORE_PEER_ADDRESS=${SC_ORG1_P1_FQDN}:${SC_ORG1_P1_PORT}
      - CORE_PEER_LOCALMSPID=${SC_ORG1_NAME}MSP
      - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/${SC_ORG1_DOMAIN}/peers/${SC_ORG1_P1_FQDN}/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/${SC_ORG1_DOMAIN}/peers/${SC_ORG1_P1_FQDN}/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/${SC_ORG1_DOMAIN}/peers/${SC_ORG1_P1_FQDN}/tls/ca.crt
      - CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations/peerOrganizations/${SC_ORG1_DOMAIN}/users/Admin@${SC_ORG1_DOMAIN}/msp
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - ${SC_PATH_ORGS}:/opt/gopath/src/github.com/hyperledger/fabric/peer/organizations
      - ${SC_PATH_SCRIPTS}:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
      - ${SC_PATH_CONF}/peercfg:/etc/hyperledger/peercfg
      #Â - ${CHAINCODE}:/opt/gopath/src/github.com/chaincode
      # - ${ARTIFACTS}:/opt/gopath/src/github.com/hyperledger/fabric/peer/artifacts
      - /var/run/:/host/var/run/
    networks:
      - ${SC_NETWORK_NAME}
    # networks:
    #   ${SC_NETWORK_NAME}:
    #     aliases:
    #       - cli
    #       - cli.${SC_NETWORK_DOMAIN}
    # depends_on:
    #   - ${SC_ORG1_P1_FQDN}
    #   - ${SC_ORG2_P1_FQDN}
    deploy:
      replicas: 1
      placement:
        constraints: [ node.hostname == ${SC_ORG1_P1_WORKER} ]
      restart_policy:
        condition: any 
        delay: 5s

  busybox:
    image: busybox
    volumes:
      - ${SC_PATH_SCRIPTS}:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
    networks:
      - ${SC_NETWORK_NAME}
    # networks:
    #   ${SC_NETWORK_NAME}:
    #     aliases
    #       - busybox
    #       - busybox.${SC_NETWORK_DOMAIN}
    command: top
    deploy:
      replicas: 1
      placement:
        constraints: [ node.hostname == ${SC_ORG1_P1_WORKER} ]

  visualizer:
    image: dockersamples/visualizer
    volumes:
      - ${SC_PATH_SCRIPTS}:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ${SC_NETWORK_NAME}
    # networks:
    #   ${SC_NETWORK_NAME}:
    #     aliases:
    #       - visualizer
    #       - visualizer.${SC_NETWORK_DOMAIN}
    ports:
      - ${SC_SWARM_VPORT}:8080
    deploy:
      replicas: 1
      placement:
        constraints: [ node.hostname == ${SC_ORG1_P1_WORKER} ]

  netshoot:
    image: nicolaka/netshoot
    volumes:
      - ${SC_PATH_SCRIPTS}:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/
    networks:
      - ${SC_NETWORK_NAME}
    # networks:
    #   ${SC_NETWORK_NAME}:
    #     aliases:
    #       - netshoot
    #       - netshoot.${SC_NETWORK_DOMAIN}
    command: top
    deploy:
      replicas: 1
      placement:
        constraints: [ node.hostname == ${SC_ORG1_P1_WORKER} ]
